/*
 * Stiffness modeling for a 6 link manipulator.
 * Computantionaly expensive.
 * 
 * Stanislav Mikhel, 2021
 */
batchload("elasto.mac")$
/*ratprint : false$*/
keepfloat : true$
/* Robot parameters */
/*       m           m           m      N/rad */
d1 : 0.324$  a1 : 0.25$  b1 : 0.16$  k1 : 3E5$
d2 : 1.075$  a2 : 0.21$  b2 : 0.16$  k2 : 4E5$
d3 : 1.0  $  a3 : 0.14$  b3 : 0.10$  k3 : 3E5$
d4 : 0.28 $  a4 : 0.12$  b4 : 0.08$  k4 : 2E5$
d5 : 0.21 $  a5 : 0.12$  b5 : 0.08$  k5 : 2E5$
d6 : 0.1  $  a6 : 0.12$  b6 : 0.08$  k6 : 1E5$

/* Kinematics */
rbt : [Rz(q1),Tz(d1), Tx,Ty,Tz,Rx,Ry,Rz,  /* link 1 */
       Ry(q2),Tz(d2), Tx,Ty,Tz,Rx,Ry,Rz,  /* link 2 */
       Ry(q3),Tx(d3), Tx,Ty,Tz,Rx,Ry,Rz,  /* link 3 */
       Rx(q4),Tx(d4), Tx,Ty,Tz,Rx,Ry,Rz,  /* link 4 */
       Ry(q5),Tx(d5), Tx,Ty,Tz,Rx,Ry,Rz,  /* link 5 */
       Rx(q6),Tx(d6), Tx,Ty,Tz,Rx,Ry,Rz,  /* link 6 */
       Txyz(0,0.01,0.01)]$                  /* tool */
       
/* Compliance */
klst : [
invert(Krot( Kbeam(d1,a1,b1,"circ"), Ry(-%pi/2) )), /* link 1, rotate to Z */
invert(Krot( Kbeam(d2,a2,b2,"circ"), Ry(-%pi/2) )), /* link 2, rotate to Z */
invert(Kbeam(d3,a3,b3,"circ")),           /* link 3 */
invert(Kbeam(d4,a4,b4,"circ")),           /* link 4 */
invert(Kbeam(d5,a5,b5,"circ")),           /* link 5 */
invert(Kbeam(d6,a6,b6,"circ")),           /* link 6 */
1/k1, 1/k2, 1/k3, 1/k4, 1/k5, 1/k6]$      /* joints */

kjnt : Diag(klst)$   /* to matrix */

/* range, q1 will be added later */
rng : [[q2,-%pi/2,%pi/2],[q3,-%pi/2,%pi/2],[q4,-%pi,%pi],[q5,-%pi,%pi],[q6,-%pi,%pi]]$
rng : reverse(rng)$

disp("Find Jacobian columns")$
[Jacj, Jacl] : Jac(rbt, [q1,q2,q3,q4,q5,q6])$ 
/* to function */
define(Jfull(q1,q2,q3,q4,q5,q6), transpose( apply(matrix, append(Jacl, Jacj))))$
/* number of link columns */
nl : length(Jacl)$
/* Force, N */
w : 100$

/******** Algebraic approach ********/

/* use 2nd method because the result is more compact */
disp("Find JJ and JL")$
ps : GetStates(rbt, [q1,q2,q3,q4,q5,q6])$ 
ps : ev(ps, q1 : 0)$  /* assume symmetry in Z */
[JL,JJ] : FindJMat(rbt, ps)$

disp("Integrate")$
JJ : float(IntegrateMat(JJ, rng))$
JL : float(IntegrateMat(JL, rng))$

disp("Matrix of coefficients")$
Mcomp : invert(JJ) . JL$ 

disp("Compliance (algebraic)")$
delta : Mcomp . addrow(
          Vec66(klst[1]), Vec66(klst[2]), Vec66(klst[3]),
          Vec66(klst[4]), Vec66(klst[5]), Vec66(klst[6])
       )$ 
k_alg : float(transpose([klst[7],klst[8],klst[9],klst[10],klst[11],klst[12]]) + delta)$ 
1 / k_alg;

/******** Experimetal approach **********/
/* update range */
rng : cons([q1,-%pi,%pi], rng)$

/* number of experiments */ 
N : 100$  
/* accumulators */
S1 : 0$  S2 : 0$ 

/* run */
disp("Experimetal approach")$
for i : 1 thru N do (
  /* random configuration and force */
  J : apply(Jfull, RandState(rng)),
  W : RandForce(w),  
  /* deflection */
  dt : float(J . (kjnt . (transpose(J) . W))),  
  A : float(addcol(
    (col(J,nl+1) * (transpose(col(J,nl+1)) . W)), 
    (col(J,nl+2) * (transpose(col(J,nl+2)) . W)),
    (col(J,nl+3) * (transpose(col(J,nl+3)) . W)),
    (col(J,nl+4) * (transpose(col(J,nl+4)) . W)),
    (col(J,nl+5) * (transpose(col(J,nl+5)) . W)),
    (col(J,nl+6) * (transpose(col(J,nl+6)) . W))
  )), 
  At : transpose(A),
  S1 : S1 + At . A,
  S2 : S2 + At . dt  
)$

disp("Compliance (experimental)")$
k_exp : invert(S1) . S2$
1 / k_exp;

/********* Error estimation *******/

N : 30$
e_expl : []$  e_algl : []$ 
/* to diagonal matrices */
kk_alg : Diag(transpose(k_alg)[1])$
kk_exp : Diag(transpose(k_exp)[1])$

/* run */
disp("Estimate errors")$
for i : 1 thru N do (
  /* random configuration and force */
  J : apply(Jfull, RandState(rng)),
  W : RandForce(w), 
  /* expected deflection */
  dt0 : float(J . (kjnt . (transpose(J) . W))),
  Jq : addcol(col(J,nl+1),col(J,nl+2),col(J,nl+3),
              col(J,nl+4),col(J,nl+5),col(J,nl+6)),
  /* algebraic approach */
  dt : (Jq. (kk_alg . (transpose(Jq) . W))),
  dt : dt - dt0,
  vv : float(sqrt(transpose(dt) . dt)),
  e_algl : cons(vv, e_algl),

  /* experimental approach */  
  dt : float(Jq. (kk_exp . (transpose(Jq) . W))),
  dt : dt - dt0,
  vv : sqrt(transpose(dt) . dt),
  e_expl : cons(vv, e_expl)
  
)$

/* average errors */
disp("Algebraic approach")$
e_alg : lreduce("+", e_algl) / length(e_algl); 
disp("Experimental approach")$
e_exp : lreduce("+", e_expl) / length(e_expl); 






